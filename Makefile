##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [4.2.0-B44] date: [Sat Jun 01 14:48:47 CST 2024]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = infantry

######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og

######################################
# paths
######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# Find all .c, .cpp and .s files in the current directory and subdirectories
C_SOURCES := $(shell find . -name "*.c")
CPP_SOURCES := $(shell find . -name "*.cpp")
ASM_SOURCES := $(shell find . -name "*.s")
ASMM_SOURCES := $(shell find . -name "*.S")

######################################
# includes
######################################
# Find all directories containing .h files and use them as include paths
C_INCLUDES := $(shell find . -type d -exec test -e "{}/" -a -name "*.h" \; -print | sed 's/^/-I/')

######################################
# libraries
######################################
# Find all .lib files in the current directory and subdirectories
LIBS := $(shell find . -name "*.lib")
LIBDIR := $(shell find . -type d -exec test -e "{}/" -a -name "*.lib" \; -print | sed 's/^/-L/')

######################################
# compiler
######################################
AS = arm-none-eabi-as
CC = arm-none-eabi-gcc
CXX = arm-none-eabi-g++
LD = arm-none-eabi-gcc

######################################
# flags
######################################
MCU = -mcpu=cortex-m4

# compile gcc flags
ASFLAGS = $(MCU) $(ADD_ASFLAGS)
CFLAGS = $(MCU) $(OPT) -ffunction-sections -fdata-sections -g -Wall -fstack-usage $(ADD_CFLAGS) $(C_INCLUDES)
CXXFLAGS = $(MCU) $(OPT) -ffunction-sections -fdata-sections -g -Wall -fstack-usage $(ADD_CXXFLAGS) $(C_INCLUDES)

# additional definitions
C_DEFS = -DUSE_HAL_DRIVER -DSTM32F407xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -D__TARGET_FPU_VFP -D__FPU_PRESENT=1

# include the definitions in the compile flags
CFLAGS += $(C_DEFS)
CXXFLAGS += $(C_DEFS)

# linker flags
LDFLAGS = $(MCU) -specs=nano.specs -TSTM32F407IGHx_FLASH.ld $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections -flto -Wl,--no-warn-rwx-segments -Wl,--print-memory-usage

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

# debug specific flags
ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
CXXFLAGS += -g -gdwarf-2
endif

# tools
HEX = arm-none-eabi-objcopy -O ihex
BIN = arm-none-eabi-objcopy -O binary
SZ = arm-none-eabi-size

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin

#######################################
# build the application
#######################################
# list of objects
C_OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
CPP_OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(CPP_SOURCES:.cpp=.o)))
ASM_OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
ASMM_OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(ASMM_SOURCES:.S=.o)))
OBJECTS = $(C_OBJECTS) $(CPP_OBJECTS) $(ASM_OBJECTS) $(ASMM_OBJECTS)

vpath %.c $(sort $(dir $(C_SOURCES)))
vpath %.cpp $(sort $(dir $(CPP_SOURCES)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))
vpath %.S $(sort $(dir $(ASMM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR)
	@$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.cpp Makefile | $(BUILD_DIR)
	@$(CXX) -c $(CXXFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.cpp=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	@$(AS) -c $(ASFLAGS) $< -o $@

$(BUILD_DIR)/%.o: %.S Makefile | $(BUILD_DIR)
	@$(AS) -c $(ASFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	@$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@

$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@

$(BUILD_DIR):
	@mkdir -p $@

#######################################
# clean up
#######################################
clean:
	rm -rf $(BUILD_DIR)

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

#######################################
# download directly without debugging
#######################################
download_dap:
	openocd -f openocd_dap.cfg -c init -c halt -c "flash write_image erase $(BUILD_DIR)/$(TARGET).bin 0x08000000" -c reset -c shutdown

download_jlink:
	JFlash -openprj'stm32.jflash' -open'$(BUILD_DIR)/$(TARGET).hex',0x8000000 -auto -startapp -exit

# *** EOF ***
